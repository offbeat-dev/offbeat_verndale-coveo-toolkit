{"version":3,"sources":["webpack://@verndale/toolkit/./node_modules/@coveo/atomic/dist/esm/atomic-result-multi-value-text.entry.js","webpack://@verndale/toolkit/./node_modules/@coveo/atomic/dist/esm/field-utils-e36c8c00.js"],"names":[],"mappings":"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","file":"scripts/7182.bundle.js","sourcesContent":["import { r as registerInstance, h, g as getElement } from './index-a326e2b3.js';\nimport { c as cw, k as kS } from './headless.esm-36d42fef.js';\nimport { R as ResultContext } from './result-template-decorators-0969aa55.js';\nimport { g as getFieldValueCaption } from './field-utils-e36c8c00.js';\nimport { I as InitializeBindings } from './initialization-utils-7c6915b8.js';\nimport { t as titleToKebab } from './utils-2f0ee174.js';\nimport './event-utils-5d69ba8f.js';\nimport './purify-e45d59ef.js';\nimport './_commonjsHelpers-5ec8f9b7.js';\n\nconst atomicResultMultiValueTextCss = \":host>ul{display:flex;list-style:none;margin:0;padding:0}:host>ul li{display:inline-block}.separator::before{display:inline;content:',\\\\00a0'}\";\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n    r = Reflect.decorate(decorators, target, key, desc);\n  else\n    for (var i = decorators.length - 1; i >= 0; i--)\n      if (d = decorators[i])\n        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst AtomicResultMultiText = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The maximum number of field values to display.\n     * If there are _n_ more values than the specified maximum, the last displayed value will be \"_n_ more...\".\n     */\n    this.maxValuesToDisplay = 3;\n    /**\n     * The delimiter used to separate values when the field isn't indexed as a multi value field.\n     */\n    this.delimiter = null;\n    this.sortedValues = null;\n  }\n  initialize() {\n    this.breadcrumbManager = cw(this.bindings.engine);\n  }\n  get resultValues() {\n    const value = kS.getResultProperty(this.result, this.field);\n    if (value === null) {\n      return null;\n    }\n    if (Array.isArray(value)) {\n      return value.map((v) => `${v}`.trim());\n    }\n    if (typeof value !== 'string' || value.trim() === '') {\n      this.error = new Error(`Could not parse \"${value}\" from field \"${this.field}\" as a string array.`);\n      return null;\n    }\n    return this.delimiter\n      ? value.split(this.delimiter).map((value) => value.trim())\n      : [value];\n  }\n  get facetSelectedValues() {\n    return this.breadcrumbManager.state.facetBreadcrumbs\n      .filter((facet) => facet.field === this.field)\n      .reduce((values, facet) => [\n      ...values,\n      ...facet.values.map(({ value }) => value.value),\n    ], []);\n  }\n  updateSortedValues() {\n    const allValues = this.resultValues;\n    if (allValues === null) {\n      this.sortedValues = null;\n      return;\n    }\n    const allValuesSet = new Set(allValues);\n    const firstValues = this.facetSelectedValues.filter((value) => allValuesSet.has(value));\n    this.sortedValues = Array.from(allValues.reduce((set, value) => set.add(value), new Set(firstValues)));\n  }\n  getShouldDisplayLabel(values) {\n    return (this.maxValuesToDisplay > 0 && values.length > this.maxValuesToDisplay);\n  }\n  getNumberOfValuesToDisplay(values) {\n    if (values.length <= this.maxValuesToDisplay) {\n      return values.length;\n    }\n    if (this.maxValuesToDisplay < 2) {\n      return this.maxValuesToDisplay;\n    }\n    return Math.min(values.length - 2, this.maxValuesToDisplay);\n  }\n  renderValue(value) {\n    const label = getFieldValueCaption(this.field, value, this.bindings.i18n);\n    const kebabValue = titleToKebab(value);\n    return (h(\"li\", { key: value, part: \"result-multi-value-text-value\" }, h(\"slot\", { name: `result-multi-value-text-value-${kebabValue}` }, label)));\n  }\n  renderSeparator(beforeValue, afterValue) {\n    return (h(\"li\", { role: \"separator\", part: \"result-multi-value-text-separator\", key: `${beforeValue}~${afterValue}`, class: \"separator\" }));\n  }\n  renderMoreLabel(value) {\n    return (h(\"li\", { key: \"more-field-values\", part: \"result-multi-value-text-value-more\" }, this.bindings.i18n.t('n-more', { value })));\n  }\n  renderListItems(values) {\n    const numberOfValuesToDisplay = this.getNumberOfValuesToDisplay(values);\n    const nodes = [];\n    for (let i = 0; i < numberOfValuesToDisplay; i++) {\n      if (i > 0) {\n        nodes.push(this.renderSeparator(values[i - 1], values[i]));\n      }\n      nodes.push(this.renderValue(values[i]));\n    }\n    if (this.getShouldDisplayLabel(values)) {\n      nodes.push(this.renderSeparator(values[numberOfValuesToDisplay - 1], 'more-field-values'));\n      nodes.push(this.renderMoreLabel(values.length - numberOfValuesToDisplay));\n    }\n    return nodes;\n  }\n  componentWillRender() {\n    this.updateSortedValues();\n  }\n  render() {\n    if (this.sortedValues === null) {\n      this.host.remove();\n      return;\n    }\n    return h(\"ul\", null, ...this.renderListItems(this.sortedValues));\n  }\n  get host() { return getElement(this); }\n};\n__decorate([\n  InitializeBindings()\n], AtomicResultMultiText.prototype, \"bindings\", void 0);\n__decorate([\n  ResultContext()\n], AtomicResultMultiText.prototype, \"result\", void 0);\nAtomicResultMultiText.style = atomicResultMultiValueTextCss;\n\nexport { AtomicResultMultiText as atomic_result_multi_value_text };\n\n//# sourceMappingURL=atomic-result-multi-value-text.entry.js.map","function getFieldCaptionNamespace(field) {\n  return `caption-${field}`;\n}\nfunction getFieldCaptions(field, i18n) {\n  return (i18n.getResourceBundle(i18n.language, getFieldCaptionNamespace(field)) || {});\n}\nfunction getFieldValueCaption(field, facetValue, i18n) {\n  return i18n.t(`${getFieldCaptionNamespace(field)}:${facetValue}`);\n}\n\nexport { getFieldCaptions as a, getFieldValueCaption as g };\n\n//# sourceMappingURL=field-utils-e36c8c00.js.map"],"sourceRoot":""}